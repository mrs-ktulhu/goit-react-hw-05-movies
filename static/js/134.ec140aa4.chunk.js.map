{"version":3,"file":"static/js/134.ec140aa4.chunk.js","mappings":"6RAAaA,EAAU,mCACVC,EAAU,+BAEVC,EAAgB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAELC,MAAM,GAADC,OAAId,EAAO,gCAAAc,OAA+Bf,IAAW,KAAD,EAAlE,OAARQ,EAAQG,EAAAK,KAAAL,EAAAE,KAAA,EACKL,EAASS,OAAO,KAAD,EAAxB,OAAJR,EAAIE,EAAAK,KAAAL,EAAAO,OAAA,SACHT,EAAKU,SAAO,QAEqC,OAFrCR,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAEnBU,QAAQC,MAAM,kCAAiCX,EAAAS,IAAST,EAAAO,OAAA,SACjD,IAAE,yBAAAP,EAAAY,OAAA,GAAAhB,EAAA,mBAEZ,kBAT4B,OAAAJ,EAAAqB,MAAA,KAAAC,UAAA,KAWhBC,EAAe,eAAAC,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOC,GAAO,IAAArB,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAElBC,MAAM,GAADC,OAAId,EAAO,WAAAc,OAAUc,EAAO,aAAAd,OAAYf,IAAW,KAAD,EAAhE,OAARQ,EAAQsB,EAAAd,KAAAc,EAAAjB,KAAA,EACKL,EAASS,OAAO,KAAD,EAAxB,OAAJR,EAAIqB,EAAAd,KAAAc,EAAAZ,OAAA,SACHT,GAAI,QAE2C,OAF3CqB,EAAAlB,KAAA,GAAAkB,EAAAV,GAAAU,EAAA,SAEXT,QAAQC,MAAM,gCAA+BQ,EAAAV,IAASU,EAAAZ,OAAA,SAC/C,MAAI,yBAAAY,EAAAP,OAAA,GAAAK,EAAA,mBAEd,gBAT2BG,GAAA,OAAAJ,EAAAH,MAAA,KAAAC,UAAA,KAWfO,EAAY,eAAAC,GAAA7B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4B,EAAOL,GAAO,IAAArB,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAEfC,MAAM,GAADC,OAAId,EAAO,WAAAc,OAAUc,EAAO,qBAAAd,OAAoBf,IAAW,KAAD,EAAxE,OAARQ,EAAQ2B,EAAAnB,KAAAmB,EAAAtB,KAAA,EACKL,EAASS,OAAO,KAAD,EAAxB,OAAJR,EAAI0B,EAAAnB,KAAAmB,EAAAjB,OAAA,SACHT,EAAK2B,MAAI,QAEsC,OAFtCD,EAAAvB,KAAA,GAAAuB,EAAAf,GAAAe,EAAA,SAEhBd,QAAQC,MAAM,gCAA+Ba,EAAAf,IAASe,EAAAjB,OAAA,SAC/C,IAAE,yBAAAiB,EAAAZ,OAAA,GAAAW,EAAA,mBAEZ,gBATwBG,GAAA,OAAAJ,EAAAT,MAAA,KAAAC,UAAA,KAWZa,EAAe,eAAAC,GAAAnC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAkC,EAAOX,GAAO,IAAArB,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAElBC,MAAM,GAADC,OAAId,EAAO,WAAAc,OAAUc,EAAO,qBAAAd,OAAoBf,IAAW,KAAD,EAAxE,OAARQ,EAAQiC,EAAAzB,KAAAyB,EAAA5B,KAAA,EACKL,EAASS,OAAO,KAAD,EAAxB,OAAJR,EAAIgC,EAAAzB,KAAAyB,EAAAvB,OAAA,SACHT,EAAKU,SAAO,QAEmC,OAFnCsB,EAAA7B,KAAA,GAAA6B,EAAArB,GAAAqB,EAAA,SAEnBpB,QAAQC,MAAM,gCAA+BmB,EAAArB,IAASqB,EAAAvB,OAAA,SAC/C,IAAE,yBAAAuB,EAAAlB,OAAA,GAAAiB,EAAA,mBAEZ,gBAT2BE,GAAA,OAAAH,EAAAf,MAAA,KAAAC,UAAA,KAWfkB,EAAmB,eAAAC,GAAAxC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuC,EAAOC,GAAK,IAAAtC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cAAAkC,EAAAnC,KAAA,EAAAmC,EAAAlC,KAAA,EAEpBC,MAAM,GAADC,OAAId,EAAO,0BAAAc,OAAyBf,EAAO,WAAAe,OAAU+B,IAAS,KAAD,EAA3E,OAARtC,EAAQuC,EAAA/B,KAAA+B,EAAAlC,KAAA,EACKL,EAASS,OAAO,KAAD,EAAxB,OAAJR,EAAIsC,EAAA/B,KAAA+B,EAAA7B,OAAA,SACHT,EAAKU,SAAO,QAE6B,OAF7B4B,EAAAnC,KAAA,GAAAmC,EAAA3B,GAAA2B,EAAA,SAEnB1B,QAAQC,MAAM,0BAAyByB,EAAA3B,IAAS2B,EAAA7B,OAAA,SACzC,IAAE,yBAAA6B,EAAAxB,OAAA,GAAAsB,EAAA,mBAEZ,gBAT+BG,GAAA,OAAAJ,EAAApB,MAAA,KAAAC,UAAA,I,0HCqChC,UA/Ee,WACb,IAAAwB,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAAwCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9BG,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAX,EAAAA,EAAAA,GAAAS,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9BG,EAAgBF,EAAaG,IAAI,UAAY,GAM7CC,EAAY,eAAAjE,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAO8D,GAAC,OAAAhE,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACR,GAAnBwD,EAAEC,iBAEyB,KAAvBjB,EAAYkB,OAAa,CAAA5D,EAAAE,KAAA,QAC3B2D,IAAAA,OAAAA,QAAwB,+BAA+B7D,EAAAE,KAAA,sBAAAF,EAAAE,KAAA,EAEjD4D,EAAYpB,GAAa,KAAD,mBAAA1C,EAAAY,OAAA,GAAAhB,EAAA,KAEjC,gBARiBwB,GAAA,OAAA5B,EAAAqB,MAAA,KAAAC,UAAA,KAUZgD,EAAW,eAAA9C,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOkB,GAAK,IAAA4B,EAAA,OAAArE,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,GAEA8B,EAAAA,EAAAA,IAAoBG,GAAO,KAAD,EACzB,KADvB4B,EAAa5C,EAAAd,MACD2D,OAChBH,IAAAA,OAAAA,QAAwB,4BAExBd,EAAgBgB,GAChBT,EAAgB,CAAEnB,MAAAA,IAClBQ,EAAe,KAChBxB,EAAAjB,KAAA,gBAAAiB,EAAAlB,KAAA,EAAAkB,EAAAV,GAAAU,EAAA,SAEDT,QAAQC,MAAM,yBAAwBQ,EAAAV,IACtCoD,IAAAA,OAAAA,QAAwB,8BAA8B,yBAAA1C,EAAAP,OAAA,GAAAK,EAAA,kBAEzD,gBAdgBS,GAAA,OAAAV,EAAAH,MAAA,KAAAC,UAAA,KA+BjB,OAfAmD,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,eAAA5C,GAAA7B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4B,IAAA,IAAAwC,EAAA,OAAArE,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,WACtBqD,EAAc,CAAD/B,EAAAtB,KAAA,gBAAAsB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,GAEe8B,EAAAA,EAAAA,IAAoBuB,GAAe,KAAD,EAAxDQ,EAAavC,EAAAnB,KACnB0C,EAAgBgB,GAAevC,EAAAtB,KAAA,gBAAAsB,EAAAvB,KAAA,EAAAuB,EAAAf,GAAAe,EAAA,SAE/Bd,QAAQC,MAAM,kCAAiCa,EAAAf,IAAS,yBAAAe,EAAAZ,OAAA,GAAAW,EAAA,kBAG7D,kBATwB,OAAAD,EAAAT,MAAA,KAAAC,UAAA,KAWzBoD,GACF,GAAG,CAACX,KAGFY,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,QAAME,SAAUZ,EAAaW,SAAA,EAC3BE,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,KAAK,cACLC,MAAOjC,EACPkC,SAtDa,SAAClB,GACpBf,EAAee,EAAEmB,OAAOF,MAAMG,cAChC,KAsDMR,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQH,SAAC,eAExBE,EAAAA,EAAAA,KAAA,MAAAF,SACGtB,GACCA,EAAaiC,KAAI,SAAAnD,GAAA,IAAGoD,EAAEpD,EAAFoD,GAAIC,EAAKrD,EAALqD,MAAK,OAC3BX,EAAAA,EAAAA,KAAA,MAAAF,UACEE,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CAACC,GAAE,WAAA/E,OAAa4E,GAAMI,MAAO,CAAEC,KAAMrC,GAAWoB,SAClDa,KAFID,EAIJ,QAKjB,C","sources":["api.js","pages/Movies.jsx"],"sourcesContent":["export const API_KEY = 'ec73ed453538a4674e2e8f7ad6508b0a';\nexport const API_URL = 'https://api.themoviedb.org/3';\n\nexport const getPopularMovies = async () => {\n  try {\n    const response = await fetch(`${API_URL}/trending/movie/day?api_key=${API_KEY}`);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching trending movies:', error);\n    return [];\n  }\n};\n\nexport const getMovieDetails = async (movieId) => {\n  try {\n    const response = await fetch(`${API_URL}/movie/${movieId}?api_key=${API_KEY}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    return null;\n  }\n};\n\nexport const getMovieCast = async (movieId) => {\n  try {\n    const response = await fetch(`${API_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n    const data = await response.json();\n    return data.cast;\n  } catch (error) {\n    console.error('Error fetching movie credits:', error);\n    return [];\n  }\n};\n\nexport const getMovieReviews = async (movieId) => {\n  try {\n    const response = await fetch(`${API_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching movie reviews:', error);\n    return [];\n  }\n};\n\nexport const searchMoviesByQuery = async (query) => {\n  try {\n    const response = await fetch(`${API_URL}/search/movie?api_key=${API_KEY}&query=${query}`);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.error('Error searching movies:', error);\n    return [];\n  }\n};","import React, { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams, Link } from 'react-router-dom';\nimport { searchMoviesByQuery } from 'api';\nimport Notiflix from 'notiflix';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchMovies, setSearchMovies] = useState([]);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchKeyword = searchParams.get('query') || '';\n\n  const handleSearch = (e) => {\n    setSearchQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (searchQuery.trim() === '') {\n      Notiflix.Notify.failure('Please enter a search query');\n    } else {\n      await fetchMovies(searchQuery);\n    }\n  };\n\n  const fetchMovies = async (query) => {\n    try {\n      const searchResults = await searchMoviesByQuery(query);\n      if (searchResults.length === 0) {\n        Notiflix.Notify.failure('Oops, nothing was found');\n      } else {\n        setSearchMovies(searchResults);\n        setSearchParams({ query });\n        setSearchQuery('');\n      }\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n      Notiflix.Notify.failure('Oops, something went wrong');\n    }\n  };\n\n  useEffect(() => {\n    const fetchPreviousMovies = async () => {\n      if (searchKeyword) {\n        try {\n          const searchResults = await searchMoviesByQuery(searchKeyword);\n          setSearchMovies(searchResults);\n        } catch (error) {\n          console.error('Error fetching previous movies:', error);\n        }\n      }\n    };\n\n    fetchPreviousMovies();\n  }, [searchKeyword]);\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          name=\"searchQuery\"\n          value={searchQuery}\n          onChange={handleSearch}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {searchMovies &&\n          searchMovies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","API_URL","getPopularMovies","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_context","prev","next","fetch","concat","sent","json","abrupt","results","t0","console","error","stop","apply","arguments","getMovieDetails","_ref2","_callee2","movieId","_context2","_x","getMovieCast","_ref3","_callee3","_context3","cast","_x2","getMovieReviews","_ref4","_callee4","_context4","_x3","searchMoviesByQuery","_ref5","_callee5","query","_context5","_x4","_useState","useState","_useState2","_slicedToArray","searchQuery","setSearchQuery","_useState3","_useState4","searchMovies","setSearchMovies","location","useLocation","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","searchKeyword","get","handleSubmit","e","preventDefault","trim","Notiflix","fetchMovies","searchResults","length","useEffect","fetchPreviousMovies","_jsxs","children","onSubmit","_jsx","type","autoComplete","autoFocus","name","value","onChange","target","toLowerCase","map","id","title","Link","to","state","from"],"sourceRoot":""}